// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sudeeya/metrics-harvester/internal/repository (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metric "github.com/sudeeya/metrics-harvester/internal/metric"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// GetAllMetrics mocks base method.
func (m *MockRepository) GetAllMetrics(arg0 context.Context) ([]metric.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", arg0)
	ret0, _ := ret[0].([]metric.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockRepositoryMockRecorder) GetAllMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockRepository)(nil).GetAllMetrics), arg0)
}

// GetMetric mocks base method.
func (m *MockRepository) GetMetric(arg0 context.Context, arg1 string) (metric.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", arg0, arg1)
	ret0, _ := ret[0].(metric.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockRepositoryMockRecorder) GetMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockRepository)(nil).GetMetric), arg0, arg1)
}

// PutBatch mocks base method.
func (m *MockRepository) PutBatch(arg0 context.Context, arg1 []metric.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBatch indicates an expected call of PutBatch.
func (mr *MockRepositoryMockRecorder) PutBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBatch", reflect.TypeOf((*MockRepository)(nil).PutBatch), arg0, arg1)
}

// PutMetric mocks base method.
func (m *MockRepository) PutMetric(arg0 context.Context, arg1 metric.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMetric", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMetric indicates an expected call of PutMetric.
func (mr *MockRepositoryMockRecorder) PutMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetric", reflect.TypeOf((*MockRepository)(nil).PutMetric), arg0, arg1)
}
